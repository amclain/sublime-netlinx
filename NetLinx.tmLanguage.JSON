{
    "fileTypes": [
        "axs",
        "axi"
    ],
    "firstLineMatch": "-[*]-( Mode:)? C -[*]-",
    "foldingStartMarker": "(?x)\n\t\t /\\*\\*(?!\\*)\n\t\t|^(?![^{]*?//|[^{]*?/\\*(?!.*?\\*/.*?\\{)).*?\\{\\s*($|//|/\\*(?!.*?\\*/.*\\S))\n\t",
    "foldingStopMarker": "(?<!\\*)\\*\\*/|^\\s*\\}",
    "keyEquivalent": "^~C",
    "name": "NetLinx",
    "patterns": [
        {
            "include": "#preprocessor-rule-enabled"
        },
        {
            "include": "#preprocessor-rule-disabled"
        },
        {
            "include": "#preprocessor-rule-other"
        },
        {
            "include": "#comments"
        },
        {
            "comment": "Compiler Directives",
            "match": "(?i)(#\\b(define|disable_warning|else|end_if|if_defined|if_not_defined|include|warn)\\b)",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Subroutine Keywords",
            "match": "(?i)\\b(call|define_call|system_call)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Array Keywords",
            "match": "(?i)\\b(length_array|max_length_array|set_length_array)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Buffer Keywords",
            "match": "(?i)\\b(clear_buffer|create_buffer|create_multi_buffer)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Channel Keywords",
            "match": "(?i)\\b(on|off|total_off)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Clock Manager Keywords",
            "match": "(?i)\\b(clkmgr_set_daylightsavings_offset|clkmgr_delete_userdefined_timeserver|clkmgr_get_active_timeserver|clkmgr_get_daylightsavings_offset|clkmgr_get_end_daylightsavings_rule|clkmgr_get_resync_period|clkmgr_get_start_daylightsavings_rule|clkmgr_get_timeservers|clkmgr_get_timezone|clkmgr_is_daylightsavings_on|clkmgr_is_network_sourced|clkmgr_set_active_timeserver|clkmgr_set_clk_source|clkmgr_set_daylightsavings_mode|clkmgr_set_daylightsavings_offset|clkmgr_set_end_daylightsavings_rule|clkmgr_set_resync_period|clkmgr_set_start_daylightsavings_rule|clkmgr_set_timezone|)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Combine/Uncombine Keywords",
            "match": "(?i)\\b(combine_channels|combine_devices|combine_levels|define_combine|define_connect_level|uncombine_channels|uncombine_devices|uncombine_levels)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Compiler Keywords",
            "match": "(?i)\\b(__DATE__|__FILE__|__LDATE__|__LINE__|__NAME__|__TIME__)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Conditional and Loop Keywords",
            "match": "(?i)\\b(break|return|default|else|for|if|include|select|active|switch|case|while|medium_while|long_while)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Boolean Values",
            "match": "(?i)\\b(true|false)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Conversion Keywords",
            "match": "(?i)\\b(atoi|atof|atol|ch_to_wc|ftoa|hextoi|itoa|format|itohex|raw_be|raw_le)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Data Event Keywords",
            "match": "(?i)\\b(awake|command|hold|onerror|offline|online|repeat|standby)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Data Type Keywords",
            "match": "(?i)\\b(char|widechar|integer|sinteger|long|slong|float|double|dev|devchan)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Define Keywords",
            "match": "(?i)\\b(define_call|define_combine|define_connect_level|define_constant|define_device|define_event|define_function|define_latching|define_module|define_mutually_exclusive|define_program|define_start|define_toggling|define_type|define_variable|program_name)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Device Keywords",
            "match": "(?i)\\b(device_id|device_id_string|device_info|device_standby|device_wake|dynamic_application_device|master_slot|master_sn|reboot|send_command|system_number)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Encode/Decode Keywords",
            "match": "(?i)\\b(length_variable_to_string|variable_to_xml|xml_to_variable|length_variable_to_xml)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Event Handler Keywords",
            "match": "(?i)\\b(button_event|channel_event|data_event|level_event|rebuild_event)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "File Operation Keywords",
            "match": "(?i)\\b(file_close|file_copy|file_createdir|file_delete|file_dir|file_getdir|file_open|file_read|file_read_line|file_removedir|file_rename|file_seek|file_setdir|file_write|file_write_line)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Get Keywords",
            "match": "(?i)\\b(get_buffer_char|get_buffer_string|get_last|get_multi_buffer_string|get_pulse_time|get_serial_number|get_system_number|get_timer|get_unique_id|get_url_list)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "IP Keywords",
            "match": "(?i)\\b(add_url_entry|delete_url_entry|get_dns_list|get_ip_address|ip_bound_client_open|ip_client_close|ip_client_open|ip_mc_server_open|ip_server_close|ip_server_open|ip_set_option|set_ip_address|set_dns_list)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Level Keywords",
            "match": "(?i)\\b(~levsyncon|~levsyncoff|create_level|send_level|set_virtual_level_count)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Log Keywords",
            "match": "(?i)\\b(set_log_level|get_log_level|amx_log)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Math Functions",
            "match": "(?i)\\b(exp_value|log_value|log10_value|power_value|sqrt_value)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Module Keywords",
            "match": "(?i)\\b(define_module|duet_mem_size_get|duet_mem_size_set|module_name)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Operator Keywords",
            "match": "(\\&|~|\\||\\^|<<|\\%|\\!|>>)",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Port Keywords",
            "match": "(?i)\\b(dynamic_polled_port|first_local_port|static_port_binding)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Push And Release Keywords",
            "match": "(?i)\\b(do_push|do_push_timed|do_release|min_to|push|push_channel|push_devchan|push_device|release|release_channel|release_devchan|release_device|to)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Set Keywords",
            "comment": "TODO: Add this.",
            "match": "(?i)\\b()\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "SMTP Keywords",
            "match": "(?i)\\b(smtp_server_config_set|smtp_server_config_get|smtp_send)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "String Keywords",
            "match": "(?i)\\b(chard|chardm|compare_string|find_string|left_string|length_string|lower_string|max_length_string|mid_string|redirect_string|remove_string|right_string|send_string|set_length_string|string|string_to_variable|upper_string|variable_to_string)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Structure Keywords",
            "match": "(?i)\\b(define_type|struct|structure)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Time And Date Keywords",
            "match": "(?i)\\b(astro_clock|clock|date|date_to_day|date_to_month|date_to_year|day|day_of_week|ldate|time|time_to_hour|time_to_minute|time_to_second)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Timeline Keywords",
            "match": "(?i)\\b(timeline_active|timeline_create|timeline_event|timeline_get|timeline_kill|timeline_pause|timeline_reload|timeline_restart|timeline_set)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Unicode Keywords",
            "match": "(?i)\\b(_wc|wc_compare_string|wc_concat_string|wc_decode|wc_encode|wc_file_close|wc_file_open|wc_file_read|wc_file_read_line|wc_file_write|wc_file_write_line|wc_find_string|wc_get_buffer_char|wc_get_buffer_string|wc_left_string|wc_length_string|wc_lower_string|wc_max_length_string|wc_mid_string|wc_remove_string|wc_right_string|wc_set_length_string|wc_to_ch|wc_tp_encode|wc_upper_string)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Variables Keywords",
            "match": "(?i)\\b(abs_value|local_var|max_value|min_value|non_volatile|persistent|random_number|stack_var|type_cast|volatile)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "comment": "Wait Keywords",
            "match": "(?i)\\b(cancel_all_wait|cancel_all_wait_until|cancel_wait|cancel_wait_until|pause_all_wait|pause_wait|restart_all_wait|restart_wait|wait|wait_until|timed_wait_until)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "match": "\\b(break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while)\\b",
            "name": "keyword.control.netlinx"
        },
        {
            "match": "\\b(asm|__asm__|auto|bool|_Bool|char|_Complex|double|enum|float|_Imaginary|int|long|short|signed|struct|typedef|union|unsigned|void)\\b",
            "name": "storage.type.netlinx"
        },
        {
            "match": "\\b(const|extern|register|restrict|static|volatile|inline)\\b",
            "name": "storage.modifier.netlinx"
        },
        {
            "comment": "common C constant naming idiom -- kConstantVariable",
            "match": "\\bk[A-Z]\\w*\\b",
            "name": "constant.other.variable.mac-classic.netlinx"
        },
        {
            "match": "\\bg[A-Z]\\w*\\b",
            "name": "variable.other.readwrite.global.mac-classic.netlinx"
        },
        {
            "match": "\\bs[A-Z]\\w*\\b",
            "name": "variable.other.readwrite.static.mac-classic.netlinx"
        },
        {
            "match": "\\b(NULL|true|false|TRUE|FALSE)\\b",
            "name": "constant.language.netlinx"
        },
        {
            "include": "#sizeof"
        },
        {
            "match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\\b",
            "name": "constant.numeric.netlinx"
        },
        {
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.netlinx"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.netlinx"
                }
            },
            "name": "string.quoted.double.netlinx",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                },
                {
                    "include": "#string_placeholder"
                }
            ]
        },
        {
            "begin": "'",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.netlinx"
                }
            },
            "end": "'",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.netlinx"
                }
            },
            "name": "string.quoted.single.netlinx",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                }
            ]
        },
        {
            "begin": "(?x)\n        \t\t^\\s*\\#\\s*(define)\\s+             # define\n        \t\t((?<id>[a-zA-Z_][a-zA-Z0-9_]*))  # macro name\n        \t\t(?:                              # and optionally:\n        \t\t    (\\()                         # an open parenthesis\n        \t\t        (\n        \t\t            \\s* \\g<id> \\s*       # first argument\n        \t\t            ((,) \\s* \\g<id> \\s*)*  # additional arguments\n        \t\t            (?:\\.\\.\\.)?          # varargs ellipsis?\n        \t\t        )\n        \t\t    (\\))                         # a close parenthesis\n        \t\t)?\n        \t",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.import.define.netlinx"
                },
                "2": {
                    "name": "entity.name.function.preprocessor.netlinx"
                },
                "4": {
                    "name": "punctuation.definition.parameters.netlinx"
                },
                "5": {
                    "name": "variable.parameter.preprocessor.netlinx"
                },
                "7": {
                    "name": "punctuation.separator.parameters.netlinx"
                },
                "8": {
                    "name": "punctuation.definition.parameters.netlinx"
                }
            },
            "end": "(?=(?://|/\\*))|$",
            "name": "meta.preprocessor.macro.netlinx",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.netlinx"
                },
                {
                    "include": "$base"
                }
            ]
        },
        {
            "begin": "^\\s*#\\s*(error|warning)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.error.netlinx"
                }
            },
            "end": "$",
            "name": "meta.preprocessor.diagnostic.netlinx",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.netlinx"
                }
            ]
        },
        {
            "begin": "^\\s*#\\s*(include|import)\\b\\s+",
            "captures": {
                "1": {
                    "name": "keyword.control.import.include.netlinx"
                }
            },
            "end": "(?=(?://|/\\*))|$",
            "name": "meta.preprocessor.c.include",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.netlinx"
                },
                {
                    "begin": "\"",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.netlinx"
                        }
                    },
                    "end": "\"",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.netlinx"
                        }
                    },
                    "name": "string.quoted.double.include.netlinx"
                },
                {
                    "begin": "<",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.netlinx"
                        }
                    },
                    "end": ">",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.netlinx"
                        }
                    },
                    "name": "string.quoted.other.lt-gt.include.netlinx"
                }
            ]
        },
        {
            "include": "#pragma-mark"
        },
        {
            "begin": "^\\s*#\\s*(define|defined|elif|else|if|ifdef|ifndef|line|pragma|undef)\\b",
            "captures": {
                "1": {
                    "name": "keyword.control.import.netlinx"
                }
            },
            "end": "(?=(?://|/\\*))|$",
            "name": "meta.preprocessor.netlinx",
            "patterns": [
                {
                    "match": "(?>\\\\\\s*\\n)",
                    "name": "punctuation.separator.continuation.netlinx"
                }
            ]
        },
        {
            "match": "\\b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t)\\b",
            "name": "support.type.sys-types.netlinx"
        },
        {
            "match": "\\b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\\b",
            "name": "support.type.pthread.netlinx"
        },
        {
            "match": "\\b(int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t)\\b",
            "name": "support.type.stdint.netlinx"
        },
        {
            "match": "\\b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\\b",
            "name": "support.constant.mac-classic.netlinx"
        },
        {
            "match": "\\b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\\b",
            "name": "support.type.mac-classic.netlinx"
        },
        {
            "include": "#block"
        },
        {
            "begin": "(?x)\n    \t\t(?:  ^                                 # begin-of-line\n    \t\t  |\n    \t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)      #  or word + space before name\n    \t\t       | (?= \\s*[A-Za-z_] ) (?<!&&)       (?<=[*&>])   #  or type modifier before name\n    \t\t     )\n    \t\t)\n    \t\t(\\s*) (?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()\n    \t\t(\n    \t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++ |                  # actual name\n    \t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )  # if it is a C++ operator\n    \t\t)\n    \t\t \\s*(?=\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.function.leading.netlinx"
                },
                "3": {
                    "name": "entity.name.function.netlinx"
                },
                "4": {
                    "name": "punctuation.definition.parameters.netlinx"
                }
            },
            "end": "(?<=\\})|(?=#)|(;)",
            "name": "meta.function.netlinx",
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#parens"
                },
                {
                    "match": "\\b(const|override)\\b",
                    "name": "storage.modifier.netlinx"
                },
                {
                    "include": "#block"
                }
            ]
        }
    ],
    "repository": {
        "access": {
            "match": "\\.[a-zA-Z_][a-zA-Z_0-9]*\\b(?!\\s*\\()",
            "name": "variable.other.dot-access.netlinx"
        },
        "block": {
            "begin": "\\{",
            "end": "\\}",
            "name": "meta.block.netlinx",
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        },
        "block_innards": {
            "patterns": [
                {
                    "include": "#preprocessor-rule-enabled-block"
                },
                {
                    "include": "#preprocessor-rule-disabled-block"
                },
                {
                    "include": "#preprocessor-rule-other-block"
                },
                {
                    "include": "#sizeof"
                },
                {
                    "include": "#access"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.support.function.leading.netlinx"
                        },
                        "2": {
                            "name": "support.function.C99.netlinx"
                        }
                    },
                    "match": "(\\s*)\\b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|di(v|fftime)|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\\b"
                },
                {
                    "captures": {
                        "1": {
                            "name": "punctuation.whitespace.function-call.leading.netlinx"
                        },
                        "2": {
                            "name": "support.function.any-method.netlinx"
                        },
                        "3": {
                            "name": "punctuation.definition.parameters.netlinx"
                        }
                    },
                    "match": "(?x) (?: (?= \\s )  (?:(?<=else|new|return) | (?<!\\w)) (\\s+))?\n\t\t\t(\\b\n\t\t\t\t(?!(while|for|do|if|else|switch|catch|enumerate|return|r?iterate)\\s*\\()(?:(?!NS)[A-Za-z_][A-Za-z0-9_]*+\\b | :: )++                  # actual name\n\t\t\t)\n\t\t\t \\s*(\\()",
                    "name": "meta.function-call.netlinx"
                },
                {
                    "captures": {
                        "1": {
                            "name": "variable.other.netlinx"
                        },
                        "2": {
                            "name": "punctuation.definition.parameters.netlinx"
                        }
                    },
                    "match": "(?x)\n\t\t\t        (?x)\n\t\t\t(?:\n\t\t\t     (?: (?= \\s )           (?<!else|new|return) (?<=\\w)\\s+      #  or word + space before name\n\t\t\t     )\n\t\t\t)\n\t\t\t(\n\t\t\t\t(?: [A-Za-z_][A-Za-z0-9_]*+ | :: )++    |              # actual name\n\t\t\t\t(?: (?<=operator) (?: [-*&<>=+!]+ | \\(\\) | \\[\\] ) )?  # if it is a C++ operator\n\t\t\t)\n\t\t\t \\s*(\\()",
                    "name": "meta.initialization.netlinx"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "$base"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.block.netlinx"
                        }
                    },
                    "match": "^/\\* =(\\s*.*?)\\s*= \\*/$\\n?",
                    "name": "comment.block.netlinx"
                },
                {
                    "begin": "/\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.netlinx"
                        }
                    },
                    "end": "\\*/",
                    "name": "comment.block.netlinx"
                },
                {
                	"comment": "Netlinx parenthesis comments.",
                    "begin": "\\(\\*",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.netlinx"
                        }
                    },
                    "end": "\\*\\)",
                    "name": "comment.block.netlinx"
                },
                {
                    "match": "\\*/.*\\n",
                    "name": "invalid.illegal.stray-comment-end.netlinx"
                },
                {
                    "captures": {
                        "1": {
                            "name": "meta.toc-list.banner.line.netlinx"
                        }
                    },
                    "match": "^// =(\\s*.*?)\\s*=\\s*$\\n?",
                    "name": "comment.line.banner.netlinx"
                },
                {
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.netlinx"
                        }
                    },
                    "end": "$\\n?",
                    "name": "comment.line.double-slash.netlinx",
                    "patterns": [
                        {
                            "match": "(?>\\\\\\s*\\n)",
                            "name": "punctuation.separator.continuation.netlinx"
                        }
                    ]
                }
            ]
        },
        "disabled": {
            "begin": "^\\s*#\\s*if(n?def)?\\b.*$",
            "comment": "eat nested preprocessor if(def)s",
            "end": "^\\s*#\\s*endif\\b.*$",
            "patterns": [
                {
                    "include": "#disabled"
                },
                {
                    "include": "#pragma-mark"
                }
            ]
        },
        "parens": {
            "begin": "\\(",
            "end": "\\)",
            "name": "meta.parens.netlinx",
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        "pragma-mark": {
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.pragma.netlinx"
                },
                "3": {
                    "name": "meta.toc-list.pragma-mark.netlinx"
                }
            },
            "match": "^\\s*(#\\s*(pragma\\s+mark)\\s+(.*))",
            "name": "meta.section"
        },
        "preprocessor-rule-disabled": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.if.netlinx"
                },
                "3": {
                    "name": "constant.numeric.preprocessor.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b)",
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)",
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.import.else.netlinx"
                        }
                    },
                    "end": "(?=^\\s*#\\s*endif\\b.*$)",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                },
                {
                    "begin": "",
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
                    "name": "comment.block.preprocessor.if-branch",
                    "patterns": [
                        {
                            "include": "#disabled"
                        },
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        },
        "preprocessor-rule-disabled-block": {
            "begin": "^\\s*(#(if)\\s+(0)\\b).*",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.if.netlinx"
                },
                "3": {
                    "name": "constant.numeric.preprocessor.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b)",
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b)",
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.import.else.netlinx"
                        }
                    },
                    "end": "(?=^\\s*#\\s*endif\\b.*$)",
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                },
                {
                    "begin": "",
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
                    "name": "comment.block.preprocessor.if-branch.in-block",
                    "patterns": [
                        {
                            "include": "#disabled"
                        },
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                }
            ]
        },
        "preprocessor-rule-enabled": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.if.netlinx"
                },
                "3": {
                    "name": "constant.numeric.preprocessor.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b)",
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*",
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.import.else.netlinx"
                        }
                    },
                    "contentName": "comment.block.preprocessor.else-branch",
                    "end": "(?=^\\s*#\\s*endif\\b.*$)",
                    "patterns": [
                        {
                            "include": "#disabled"
                        },
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                },
                {
                    "begin": "",
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
                    "patterns": [
                        {
                            "include": "$base"
                        }
                    ]
                }
            ]
        },
        "preprocessor-rule-enabled-block": {
            "begin": "^\\s*(#(if)\\s+(0*1)\\b)",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.if.netlinx"
                },
                "3": {
                    "name": "constant.numeric.preprocessor.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b)",
            "patterns": [
                {
                    "begin": "^\\s*(#\\s*(else)\\b).*",
                    "captures": {
                        "1": {
                            "name": "meta.preprocessor.netlinx"
                        },
                        "2": {
                            "name": "keyword.control.import.else.netlinx"
                        }
                    },
                    "contentName": "comment.block.preprocessor.else-branch.in-block",
                    "end": "(?=^\\s*#\\s*endif\\b.*$)",
                    "patterns": [
                        {
                            "include": "#disabled"
                        },
                        {
                            "include": "#pragma-mark"
                        }
                    ]
                },
                {
                    "begin": "",
                    "end": "(?=^\\s*#\\s*(else|endif)\\b.*$)",
                    "patterns": [
                        {
                            "include": "#block_innards"
                        }
                    ]
                }
            ]
        },
        "preprocessor-rule-other": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b).*$",
            "patterns": [
                {
                    "include": "$base"
                }
            ]
        },
        "preprocessor-rule-other-block": {
            "begin": "^\\s*(#\\s*(if(n?def)?)\\b.*?(?:(?=(?://|/\\*))|$))",
            "captures": {
                "1": {
                    "name": "meta.preprocessor.netlinx"
                },
                "2": {
                    "name": "keyword.control.import.netlinx"
                }
            },
            "end": "^\\s*(#\\s*(endif)\\b).*$",
            "patterns": [
                {
                    "include": "#block_innards"
                }
            ]
        },
        "sizeof": {
            "match": "\\b(sizeof)\\b",
            "name": "keyword.operator.sizeof.netlinx"
        },
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\(\\\\|[abefnprtv'\"?]|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8})",
                    "name": "constant.character.escape.netlinx"
                },
                {
                    "match": "\\\\.",
                    "name": "invalid.illegal.unknown-escape.netlinx"
                }
            ]
        },
        "string_placeholder": {
            "patterns": [
                {
                    "match": "(?x)%\n    \t\t\t\t\t\t(\\d+\\$)?                             # field (argument #)\n    \t\t\t\t\t\t[#0\\- +']*                           # flags\n    \t\t\t\t\t\t[,;:_]?                              # separator character (AltiVec)\n    \t\t\t\t\t\t((-?\\d+)|\\*(-?\\d+\\$)?)?              # minimum field width\n    \t\t\t\t\t\t(\\.((-?\\d+)|\\*(-?\\d+\\$)?)?)?         # precision\n    \t\t\t\t\t\t(hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier\n    \t\t\t\t\t\t[diouxXDOUeEfFgGaACcSspn%]           # conversion type\n    \t\t\t\t\t",
                    "name": "constant.other.placeholder.netlinx"
                },
                {
                    "match": "%",
                    "name": "invalid.illegal.placeholder.netlinx"
                }
            ]
        }
    },
    "scopeName": "source.netlinx",
    "uuid": "25066DC2-6B1D-11D9-9D5B-000D93589AF6"
}